// MJS 3.4.24 Original from Act 14-18 mp. 
// This is a bakup of userRoutes.js, preferabley naned userRoutes.bak. 
// Basically this file was changed on Mike's directory, but wasn't pushed for a long time.
// There were 2 errors. The first was verablly indicated to Jorday, but 2nd probably wasn't 
// ever noted (although it was changed ). This, along with insufficient testing, lead to 
// Cody's persistent server problem when logging in. 
const router = require('express').Router();
const { User } = require('../../models');

// MJS 3.6.24 - Simple /api/userS/hello get route to get one working before loading several files for /api, 
// which currently is 100% broke.
router.get('/hello', async (req, res) => {
  try {
      res.status(200).json("MJS api/userS/hello route in controller/api/userRoutes.js found!");
  } catch (err) {
    res.status(500).json(err);
  }
});

// if a GET request is made to /api/users (note S at end) a fixed msg is sent
router.get("/", async (req, res) => {
  res.status(200).json('MJS api/userS get route hit!');
});

router.post('/', async (req, res) => {
  try {
    const userData = await User.create(req.body);

    req.session.save(() => {
      req.session.user_id = userData.id;
      req.session.logged_in = true;

      res.status(200).json(userData);
    });
  } catch (err) {
    res.status(400).json(err);
  }
});

router.post('/login', async (req, res) => {
  try {
    const userData = await User.findOne({ where: { email: req.body.email } });

    if (!userData) {
      res
        .status(400)
        .json({ message: 'Incorrect email or password, please try again' });
      return;
    }

    const validPassword = await userData.checkPassword(req.body.password);

    if (!validPassword) {
      res
        .status(400)
        .json({ message: 'Incorrect email or password, please try again' });
      return;
    }

    req.session.save(() => {
      req.session.user_id = userData.id;
      req.session.logged_in = true;
      
      res.json({ user: userData, message: 'You are now logged in!' });
    });

  } catch (err) {
    res.status(400).json(err);
  }
});

router.post('/logout', (req, res) => {
  if (req.session.logged_in) {
    req.session.destroy(() => {
      res.status(204).end();
    });
  } else {
    res.status(404).end();
  }
});

module.exports = router;
